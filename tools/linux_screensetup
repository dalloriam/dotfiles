#!/usr/bin/env python3
import json
import re
import subprocess

from argparse import ArgumentParser
from pathlib import Path
from typing import Any, Dict, List, Optional


_MONITORS_FILE = Path("~").expanduser() / ".config" / "dalloriam" / "monitors.json"


def _get_monitors_config() -> Optional[Dict[str, Any]]:
    if not _MONITORS_FILE.exists():
        return None

    return json.loads(_MONITORS_FILE.read_text())


def _get_connected_monitors() -> List[str]:
    output = subprocess.getoutput("xrandr --current")
    matches = re.findall(r"^(.*?)((connected)|(disconnected))", output, flags=re.MULTILINE)
    if not matches:
        return
    return [m[0].strip() for m in matches if m[1] == "connected"]


def _apply_layout(layout_cfg: List[str]) -> None:
    print("Applying layout...")
    for i in range(len(layout_cfg) - 1):
        current = layout_cfg[i]
        next_mon = layout_cfg[i + 1]
        out = subprocess.getoutput(
            "xrandr --output {next_mon} --right-of {current}".format(current=current, next_mon=next_mon)
        )
        if out.strip():
            print(out)


def main() -> None:
    config = _get_monitors_config()
    if not config:
        # Graceful exit.
        return

    monitors = _get_connected_monitors()

    possible_layouts = []
    for layout_cfg in config["configurations"]:
        if all(m in monitors for m in layout_cfg["layout"]):
            possible_layouts.append(layout_cfg)

    if not possible_layouts:
        return

    if len(possible_layouts) == 1:
        # Directly apply layout
        _apply_layout(possible_layouts[0]["layout"])
    else:
        # Ask user to choose.
        pass


if __name__ == "__main__":
    main()
